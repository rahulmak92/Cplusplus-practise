// Lab 6 exercise 1, implementation file// Fall 2014#include "Batch.h"#include <iostream>using namespace std;      Batch::Batch () {    num = 0;    elements = NULL;}Batch::Batch (const Batch &src){    elements = new int[src.num];    for (int i=0; i<src.num; i++)        elements[i] = src.elements[i];    num = src.num;}Batch::~Batch () {    delete [] elements;}void Batch::insert(int element) {    if (!find(element)) {        int *old = elements;        elements = new int[num+1];        for (int i=0; i<num; i++)            elements[i] = old[i];        elements[num] = element;        num++;        delete [] old;    }}bool Batch::find(int element) const{    for (int i=0; i<num; i++)        if (element==elements[i])            return true;    return false;}int  Batch::count() const {    return num;}bool Batch::operator==(const Batch &that){    if (num != that.num)    {    	return false;    }    for (int i=0; i<num; i++)        if (!that.find(elements[i]))            {        	return false;            }    return true;}Batch Batch::operator+(const Batch &that){    Batch result(that);    for (int i=0; i<num; i++)    {        result.insert(elements[i]);    }    return result;}