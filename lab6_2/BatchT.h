// Lab 6 exercise 2, header file// Fall 2014template <typename T>class Batch        {  private:    T *elements;    int num;  public:    Batch ();    Batch (const Batch &);    ~Batch ();        int count() const;    void insert(T element);    bool find(T element) const;};template <typename T>Batch<T>::Batch () {    num = 0;    elements = NULL;}template <typename T>Batch<T>::Batch (const Batch &src) {    elements = new T[src.num];    for (int i=0; i<src.num; i++)        elements[i] = src.elements[i];    num = src.num;}template <typename T>Batch<T>::~Batch () {    delete [] elements;}template <typename T>void Batch<T>::insert(T element) {    if (!find(element)) {        T *old = elements;        elements = new T[num+1];        for (int i=0; i<num; i++)            elements[i] = old[i];        elements[num] = element;        num++;        delete [] old;    }}template <typename T>bool Batch<T>::find(T element) const {    for (int i=0; i<num; i++)        if (element==elements[i])            return true;    return false;}template <typename T>int  Batch<T>::count() const {    return num;}